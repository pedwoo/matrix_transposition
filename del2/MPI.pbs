#!/bin/bash

# Job name
#PBS -N MPI_Matrix_analysis

# Output files
#PBS -o ./MPI_Matrix_analysis.o
#PBS -e ./MPI_Matrix_analysis.e

# Queue name
#PBS -q short_cpuQ

# Set the maximum wall time
#PBS -l walltime=01:00:00

# Number of nodes, cpus, mpi processors and amount of memory
#PBS -l select=1:ncpus=96:mem=4gb

module load gcc91
module load mpich-3.2.1--gcc-9.1.0

gcc() {
    gcc-9.1.0 "$@"
}
gcc --version


# Information about the node
echo "=== NODE SPECIFICATION ==="
lscpu
echo "\n"

# Working directory setup
cd /home/daniele.pedrolli/del2/
mkdir -p exec

# Compile the code
gcc 01b_transposition_sequential.c -o exec/01b_transposition_sequential
gcc -O2 -fopenmp 03b_transposition_omp.c -o exec/03b_transposition_omp
mpicc 04_transposition_mpi_one.c -o exec/04_transposition_mpi_one
mpicc 05_transposition_mpi_two.c -o exec/05_transposition_mpi_two

sleep 2
ls -l exec

ITERATIONS=30

# Print header
echo "=== Transposition and symmetry check stats ===" 


# Run Sequential
echo "\n=== Running Sequential ==="
# Arguments are <size (2^n)> <iterations>
./exec/01b_transposition_sequential 4 $ITERATIONS
./exec/01b_transposition_sequential 5 $ITTERATIONS
./exec/01b_transposition_sequential 6 $ITERATIONS
./exec/01b_transposition_sequential 7 $ITERATIONS
./exec/01b_transposition_sequential 8 $ITERATIONS
./exec/01b_transposition_sequential 9 $ITERATIONS
./exec/01b_transposition_sequential 10 $ITERATIONS
./exec/01b_transposition_sequential 11 $ITERATIONS
./exec/01b_transposition_sequential 12 $ITERATIONS


# Run OpenMP with 32 threads
echo "\n=== Running OpenMP (32 threads) ==="
# Arguments are <size (2^n)> <n_threads> <iterations>
./exec/03b_transposition_omp 4 16 $ITERATIONS
./exec/03b_transposition_omp 5 16 $ITERATIONS
./exec/03b_transposition_omp 6 16 $ITERATIONS
./exec/03b_transposition_omp 7 16 $ITERATIONS
./exec/03b_transposition_omp 8 16 $ITERATIONS
./exec/03b_transposition_omp 9 16 $ITERATIONS
./exec/03b_transposition_omp 10 16 $ITERATIONS
./exec/03b_transposition_omp 11 16 $ITERATIONS
./exec/03b_transposition_omp 12 16 $ITERATIONS


# Run MPI approach one for all sizes
echo "\n=== Running MPI_one (32 processors) ==="
# Arguments are: -np <n_processors> <size (2^n)> <iterations>
mpirun -np 32 ./exec/04_transposition_mpi_one 5 $ITERATIONS
mpirun -np 32 ./exec/04_transposition_mpi_one 6 $ITERATIONS
mpirun -np 32 ./exec/04_transposition_mpi_one 7 $ITERATIONS
mpirun -np 32 ./exec/04_transposition_mpi_one 8 $ITERATIONS
mpirun -np 32 ./exec/04_transposition_mpi_one 9 $ITERATIONS
mpirun -np 32 ./exec/04_transposition_mpi_one 10 $ITERATIONS
mpirun -np 32 ./exec/04_transposition_mpi_one 11 $ITERATIONS
mpirun -np 32 ./exec/04_transposition_mpi_one 12 $ITERATIONS


# Run MPI approach two for all sizes
echo  "\n=== Running MPI_two (32 processors) ==="
# Arguments are: -np <n_processors> <size (2^n)> <iterations>
mpirun -np 32 ./exec/05_transposition_mpi_two 5 $ITERATIONS
mpirun -np 32 ./exec/05_transposition_mpi_two 6 $ITERATIONS
mpirun -np 32 ./exec/05_transposition_mpi_two 7 $ITERATIONS
mpirun -np 32 ./exec/05_transposition_mpi_two 8 $ITERATIONS
mpirun -np 32 ./exec/05_transposition_mpi_two 9 $ITERATIONS
mpirun -np 32 ./exec/05_transposition_mpi_two 10 $ITERATIONS
mpirun -np 32 ./exec/05_transposition_mpi_two 11 $ITERATIONS
mpirun -np 32 ./exec/05_transposition_mpi_two 12 $ITERATIONS


# Strong Scaling for MPI_one and MPI_two 
# (keep the size of the problem constant, increase the number of processors)
echo "\n=== Running Strong Scaling ==="
echo "Strong Scaling for MPI_one 1024"
# Arguments are: -np <n_processors> <size (2^n)> <iterations>
mpirun -np 1 ./exec/04_transposition_mpi_one 10 $ITERATIONS
mpirun -np 2 ./exec/04_transposition_mpi_one 10 $ITERATIONS
mpirun -np 4 ./exec/04_transposition_mpi_one 10 $ITERATIONS
mpirun -np 8 ./exec/04_transposition_mpi_one 10 $ITERATIONS
mpirun -np 16 ./exec/04_transposition_mpi_one 10 $ITERATIONS
mpirun -np 32 ./exec/04_transposition_mpi_one 10 $ITERATIONS
mpirun -np 64 ./exec/04_transposition_mpi_one 10 $ITERATIONS

echo "Strong Scaling for MPI_two 1024"
# Arguments are: -np <n_processors> <size (2^n)> <iterations>
mpirun -np 1 ./exec/05_transposition_mpi_two 10 $ITERATIONS
mpirun -np 2 ./exec/05_transposition_mpi_two 10 $ITERATIONS
mpirun -np 4 ./exec/05_transposition_mpi_two 10 $ITERATIONS
mpirun -np 8 ./exec/05_transposition_mpi_two 10 $ITERATIONS
mpirun -np 16 ./exec/05_transposition_mpi_two 10 $ITERATIONS
mpirun -np 32 ./exec/05_transposition_mpi_two 10 $ITERATIONS
mpirun -np 64 ./exec/05_transposition_mpi_two 10 $ITERATIONS

echo "Strong Scaling for MPI_one 2048"
# Arguments are: -np <n_processors> <size (2^n)> <iterations>
mpirun -np 1 ./exec/04_transposition_mpi_one 11 $ITERATIONS
mpirun -np 2 ./exec/04_transposition_mpi_one 11 $ITERATIONS
mpirun -np 4 ./exec/04_transposition_mpi_one 11 $ITERATIONS
mpirun -np 8 ./exec/04_transposition_mpi_one 11 $ITERATIONS
mpirun -np 16 ./exec/04_transposition_mpi_one 11 $ITERATIONS
mpirun -np 32 ./exec/04_transposition_mpi_one 11 $ITERATIONS
mpirun -np 64 ./exec/04_transposition_mpi_one 11 $ITERATIONS

echo "Strong Scaling for MPI_two 2048"
# Arguments are: -np <n_processors> <size (2^n)> <iterations>
mpirun -np 1 ./exec/05_transposition_mpi_two 11 $ITERATIONS
mpirun -np 2 ./exec/05_transposition_mpi_two 11 $ITERATIONS
mpirun -np 4 ./exec/05_transposition_mpi_two 11 $ITERATIONS
mpirun -np 8 ./exec/05_transposition_mpi_two 11 $ITERATIONS
mpirun -np 16 ./exec/05_transposition_mpi_two 11 $ITERATIONS
mpirun -np 32 ./exec/05_transposition_mpi_two 11 $ITERATIONS
mpirun -np 64 ./exec/05_transposition_mpi_two 11 $ITERATIONS

echo "Strong Scaling for MPI_one 4096"
# Arguments are: -np <n_processors> <size (2^n)> <iterations>
mpirun -np 1 ./exec/04_transposition_mpi_one 12 $ITERATIONS
mpirun -np 2 ./exec/04_transposition_mpi_one 12 $ITERATIONS
mpirun -np 4 ./exec/04_transposition_mpi_one 12 $ITERATIONS
mpirun -np 8 ./exec/04_transposition_mpi_one 12 $ITERATIONS
mpirun -np 16 ./exec/04_transposition_mpi_one 12 $ITERATIONS
mpirun -np 32 ./exec/04_transposition_mpi_one 12 $ITERATIONS
mpirun -np 64 ./exec/04_transposition_mpi_one 12 $ITERATIONS

echo "Strong Scaling for MPI_two 4096"
# Arguments are: -np <n_processors> <size (2^n)> <iterations>
mpirun -np 1 ./exec/05_transposition_mpi_two 12 $ITERATIONS
mpirun -np 2 ./exec/05_transposition_mpi_two 12 $ITERATIONS
mpirun -np 4 ./exec/05_transposition_mpi_two 12 $ITERATIONS
mpirun -np 8 ./exec/05_transposition_mpi_two 12 $ITERATIONS
mpirun -np 16 ./exec/05_transposition_mpi_two 12 $ITERATIONS
mpirun -np 32 ./exec/05_transposition_mpi_two 12 $ITERATIONS
mpirun -np 64 ./exec/05_transposition_mpi_two 12 $ITERATIONS


# Weak Scaling for MPI_oneone and MPI_two
# (increase the size of the problem and the number of processors proportionally)
echo "\n=== Running Weak Scaling ==="
echo "Weak Scaling for MPI_one (16 rows per processor)"
# Arguments are: -np <n_processors> <size (2^n)> <iterations>
mpirun -np 1 ./exec/04_transposition_mpi_one 4 $ITERATIONS
mpirun -np 2 ./exec/04_transposition_mpi_one 5 $ITERATIONS
mpirun -np 4 ./exec/04_transposition_mpi_one 6 $ITERATIONS
mpirun -np 8 ./exec/04_transposition_mpi_one 7 $ITERATIONS
mpirun -np 16 ./exec/04_transposition_mpi_one 8 $ITERATIONS
mpirun -np 32 ./exec/04_transposition_mpi_one 9 $ITERATIONS
mpirun -np 64 ./exec/04_transposition_mpi_one 10 $ITERATIONS

echo "Weak Scaling for MPI_two (16 rows per processor)"
# Arguments are: -np <n_processors> <size (2^n)> <iterations>
mpirun -np 1 ./exec/05_transposition_mpi_two 4 $ITERATIONS
mpirun -np 2 ./exec/05_transposition_mpi_two 5 $ITERATIONS
mpirun -np 4 ./exec/05_transposition_mpi_two 6 $ITERATIONS
mpirun -np 8 ./exec/05_transposition_mpi_two 7 $ITERATIONS
mpirun -np 16 ./exec/05_transposition_mpi_two 8 $ITERATIONS
mpirun -np 32 ./exec/05_transposition_mpi_two 9 $ITERATIONS
mpirun -np 64 ./exec/05_transposition_mpi_two 10 $ITERATIONS

echo "\n Weak scaling for MPI_one (32 rows per processor)"
# Arguments are: -np <n_processors> <size (2^n)> <iterations>
mpirun -np 1 ./exec/04_transposition_mpi_one 5 $ITERATIONS
mpirun -np 2 ./exec/04_transposition_mpi_one 6 $ITERATIONS
mpirun -np 4 ./exec/04_transposition_mpi_one 7 $ITERATIONS
mpirun -np 8 ./exec/04_transposition_mpi_one 8 $ITERATIONS
mpirun -np 16 ./exec/04_transposition_mpi_one 9 $ITERATIONS
mpirun -np 32 ./exec/04_transposition_mpi_one 10 $ITERATIONS
mpirun -np 64 ./exec/04_transposition_mpi_one 11 $ITERATIONS

echo "Weak scaling for MPI_two (32 rows per processor)"
# Arguments are: -np <n_processors> <size (2^n)> <iterations>
mpirun -np 1 ./exec/05_transposition_mpi_two 5 $ITERATIONS
mpirun -np 2 ./exec/05_transposition_mpi_two 6 $ITERATIONS
mpirun -np 4 ./exec/05_transposition_mpi_two 7 $ITERATIONS
mpirun -np 8 ./exec/05_transposition_mpi_two 8 $ITERATIONS
mpirun -np 16 ./exec/05_transposition_mpi_two 9 $ITERATIONS
mpirun -np 32 ./exec/05_transposition_mpi_two 10 $ITERATIONS
mpirun -np 64 ./exec/05_transposition_mpi_two 11 $ITERATIONS